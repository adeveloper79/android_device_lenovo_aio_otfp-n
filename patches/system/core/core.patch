diff --git a/libcutils/fs_config.c b/libcutils/fs_config.c
index 68cfcbe..f192386 100644
--- a/libcutils/fs_config.c
+++ b/libcutils/fs_config.c
@@ -143,7 +143,8 @@ static const struct fs_path_config android_files[] = {
     { 00700, AID_SYSTEM,    AID_SHELL,     CAP_MASK_LONG(CAP_BLOCK_SUSPEND), "system/bin/inputflinger" },
 
     /* Support FIFO scheduling mode in SurfaceFlinger. */
-    { 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
+    /* Disabled for now as this caused LD_PRELOAD and LD_SHIM_LIBS to be sanitized in linker */
+    //{ 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
 
     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/uncrypt" },
     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/install-recovery.sh" },
-- 

diff --git a/libcutils/fs_config.c b/libcutils/fs_config.c
index 68cfcbe..f192386 100644
--- a/libcutils/fs_config.c
+++ b/libcutils/fs_config.c
@@ -143,7 +143,8 @@ static const struct fs_path_config android_files[] = {
     { 00700, AID_SYSTEM,    AID_SHELL,     CAP_MASK_LONG(CAP_BLOCK_SUSPEND), "system/bin/inputflinger" },
 
     /* Support FIFO scheduling mode in SurfaceFlinger. */
-    { 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
+    /* Disabled for now as this caused LD_PRELOAD and LD_SHIM_LIBS to be sanitized in linker */
+    //{ 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
 
     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/uncrypt" },
     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/install-recovery.sh" },
diff --git a/liblog/logger_write.c b/liblog/logger_write.c
index c7b5a84..e8a3617 100644
--- a/liblog/logger_write.c
+++ b/liblog/logger_write.c
@@ -393,6 +393,61 @@ LIBLOG_ABI_PUBLIC int __android_log_buf_write(int bufID, int prio,
 
     if (!tag)
         tag = "";
+     // Prevent MTK audio and silead fingerprint libs from spamming in the log
+     if (!strcmp(tag, "AudioMTKFilterManager") ||
+         !strcmp(tag, "AudioALSAStreamOut") ||
+         !strcmp(tag, "Timed out waiting for vsync...") ||
+         !strcmp(tag, "AudioMTKStreamOut") ||
+         !strcmp(tag, "AudioVPWStreamIn") ||
+         !strcmp(tag, "AudioDigitalControl") ||
+         !strcmp(tag, "AudioLoopbackController") ||
+         !strcmp(tag, "AudioMTKVolumeController") ||
+         !strcmp(tag, "AudioDigitalControl") ||
+         !strcmp(tag, "AudioAnalogControl") ||
+         !strcmp(tag, "AudioAfeReg") ||
+         !strcmp(tag, "AudioAnalogReg") ||
+         !strcmp(tag, "AudioPlatformDevice") ||
+         !strcmp(tag, "AudioMachineDevice") ||
+         !strcmp(tag, "MtkAudioLoud") ||
+         !strcmp(tag, "LoopbackManager") ||
+         !strcmp(tag, "AudioInterConnection") ||
+         !strcmp(tag, "SLCODE") ||
+	       (strstr(tag, "ccci") != NULL) ||
+	       (strstr(tag, "Eis") != NULL) ||
+	       (strstr(tag, "aaa") != NULL) ||
+	       (strstr(tag, "af_") != NULL) ||
+	       (strstr(tag, "ae_") != NULL) ||
+	       (strstr(tag, "IMem") != NULL) ||
+	       (strstr(tag, "iio") != NULL) ||
+	       (strstr(tag, "Mdp") != NULL) ||
+	       (strstr(tag, "isp_tuning") != NULL) ||
+	       (strstr(tag, "Ae") != NULL) ||
+      	 (strstr(tag, "flash") != NULL) ||
+	       (strstr(tag, "flicker_hal") != NULL) ||
+      	 (strstr(tag, "NVRAM") != NULL) ||
+	       (strstr(tag, "Flicker") != NULL) ||
+	       (strstr(tag, "TuningMgr") != NULL) ||
+	       (strstr(tag, "MDP") != NULL) ||
+	       (strstr(tag, "Iop") != NULL) ||
+	       (strstr(tag, "Isp") != NULL) ||
+	       (strstr(tag, "VDO") != NULL) ||
+	       (strstr(tag, "MtkOmx") != NULL) ||
+	       (strstr(tag, "MtkCam") != NULL) ||
+         (strstr(tag, "AfAlgo") != NULL) ||
+         (strstr(tag, "isp_mgr_") != NULL) ||
+         (strstr(tag, "SeninfDrvImp") != NULL) ||
+         (strstr(tag, "NormalPipe") != NULL) ||
+         (strstr(tag, "awb_state") != NULL) ||
+         (strstr(tag, "paramctrl_attributes") != NULL) ||
+         (strstr(tag, "LensMCU") != NULL) ||
+         (strstr(tag, "GraphicBuffer") != NULL) ||
+         (strstr(tag, "MALI") != NULL) ||
+         (strstr(tag, "GED") != NULL) ||
+         (strstr(tag, "SocketClient") != NULL) ||
+	       (strstr(tag, "BT3") != NULL)) {
+             return 0;
+     }
+ 
 
     /* XXX: This needs to go! */
     if ((bufID != LOG_ID_RADIO) &&
-- 

diff --git a/init/action.cpp b/init/action.cpp
index 510ea89..8a14b44 100644
--- a/init/action.cpp
+++ b/init/action.cpp
@@ -118,15 +118,15 @@ void Action::ExecuteCommand(const Command& command) const {
     Timer t;
     int result = command.InvokeFunc();
 
-    if (klog_get_level() >= KLOG_INFO_LEVEL) {
+//    if (klog_get_level() >= KLOG_INFO_LEVEL) {
         std::string trigger_name = BuildTriggersString();
         std::string cmd_str = command.BuildCommandString();
         std::string source = command.BuildSourceString();
 
-        INFO("Command '%s' action=%s%s returned %d took %.2fs\n",
+        ERROR("Command '%s' action=%s%s returned %d took %.2fs\n",
              cmd_str.c_str(), trigger_name.c_str(), source.c_str(),
              result, t.duration());
-    }
+  //  }
 }
 
 bool Action::ParsePropertyTrigger(const std::string& trigger, std::string* err) {
diff --git a/init/service.cpp b/init/service.cpp
index 76e0bc8..68aac18 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -385,7 +385,7 @@ bool Service::Start() {
         }
     }
 
-    NOTICE("Starting service '%s'...\n", name_.c_str());
+    ERROR("Starting service '%s'...\n", name_.c_str());
 
     pid_t pid = fork();
     if (pid == 0) {
-- 
